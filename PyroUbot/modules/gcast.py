from PyroUbot import *

__MODULE__ = "gcast"
__HELP__ = """
<b>‚óñ ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã …¢·¥Ñ·¥Äs·¥õ‚óó</b>

  <b>‚ùë ·¥Ñ·¥ç·¥Ö:</b> <code>{0}ucast</code> [·¥õ·¥áx·¥õ/ Ä·¥á·¥ò ü è ·¥õ·¥è ·¥õ·¥áx·¥õ/·¥ç·¥á·¥Ö…™·¥Ä]
  <b>‚û† ·¥ò·¥á…¥·¥ä·¥á ü·¥Äs·¥Ä…¥:</b> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥ ·¥ã·¥á s·¥á·¥ç·¥ú·¥Ä ·¥ús·¥á Ä

¬† <b>‚ùë ·¥Ñ·¥ç·¥Ö:</b> <code>{0}gcast</code> [·¥õ·¥áx·¥õ/ Ä·¥á·¥ò ü è ·¥õ·¥è ·¥õ·¥áx·¥õ/·¥ç·¥á·¥Ö…™·¥Ä]
  <b>‚û† ·¥ò·¥á…¥·¥ä·¥á ü·¥Äs·¥Ä…¥:</b> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥ ·¥ã·¥á s·¥á·¥ç·¥ú·¥Ä …¢ Ä·¥è·¥ú·¥ò

  <b>‚ùë ·¥Ñ·¥ç·¥Ö:</b> <code>{0}send</code> [·¥ús·¥á Ä…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á - ·¥õ·¥áx·¥õ/ Ä·¥á·¥ò ü è]
  <b>‚û† ·¥ò·¥á…¥·¥ä·¥á ü·¥Äs·¥Ä…¥:</b> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥ ·¥ã·¥á ·¥ús·¥á Ä/…¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á üd
  
  <b>‚ùë ·¥Ñ·¥ç·¥Ö:</b> <code>{0}auto_gcast</code> («´·¥ú·¥á Ä è) - (·¥†·¥Ä ü·¥ú·¥á)
      <b>‚ùë> «´·¥ú·¥á Ä è & ·¥†·¥Ä ü·¥ú·¥á:</b>
      <b>‚îú‚û† ON/OFF:</b> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ ·¥Ö·¥Ä…¥ ·¥ç·¥á…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ …¢·¥Ñ·¥Äs·¥õ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s
      <b>‚îú‚û† TEXT - ·¥ã·¥Ä·¥õ·¥Ä-·¥ã·¥Ä·¥õ·¥Ä/ Ä·¥á·¥ò ü è_·¥õ·¥áx·¥õ:</b> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ ·¥õ·¥áx·¥õ ·¥ã·¥á ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á …¢·¥Ñ·¥Äs·¥õ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s
      <b>‚îú‚û† DELAY - ·¥Ä…¥…¢·¥ã·¥Ä:</b> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á Ä·¥ú ô·¥Ä ú ·¥Ö·¥ú Ä·¥Äs…™ ·¥Ö·¥á ü·¥Ä è ·¥ò·¥Ä·¥Ö·¥Ä s·¥á·¥õ…™·¥Ä·¥ò ·¥ò·¥ú·¥õ·¥Ä Ä·¥Ä…¥ …¢·¥Ñ·¥Äs·¥õ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s
      <b>‚ï∞‚û† LIMIT - ON/OFF:</b> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ ·¥Ö·¥Ä…¥ ·¥ç·¥á…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥ “ì·¥ú…¥…¢s…™ ·¥Ñs·¥ã  ü…™·¥ç…™·¥õ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s s·¥á·¥õ…™·¥Ä·¥ò ùü∑ùüª ·¥ç·¥á…¥…™·¥õ
  <b>‚û† ·¥ò·¥á…¥·¥ä·¥á ü·¥Äs·¥Ä…¥:</b> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…™ Ä…™·¥ç·¥ã·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ …¢·¥Ñ·¥Äs·¥õ s·¥á·¥Ñ·¥Ä Ä·¥Ä ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s
"""


@PY.UBOT("bc")
@PY.TOP_CMD
async def _(client, message):
    _msg = f"<b>·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>"
    gcs = await message.reply(_msg)

    command, text = extract_type_and_msg(message)

    if command not in ["group", "users", "all"] or not text:
        return await gcs.edit(f"<code>{message.text.split()[0]}</code> <b>[·¥õ è·¥ò·¥á] [·¥õ·¥áx·¥õ/ Ä·¥á·¥ò ü è]</b>")

    chats = await get_data_id(client, command)
    blacklist = await get_list_from_vars(client.me.id, "BL_ID")

    done = 0
    failed = 0
    for chat_id in chats:
        if chat_id in blacklist or chat_id in BLACKLIST_CHAT:
            continue

        try:
            await (text.copy(chat_id) if message.reply_to_message else client.send_message(chat_id, text))
            done += 1
        except FloodWait as e:
            await asyncio.sleep(e.value)
            await (text.copy(chat_id) if message.reply_to_message else client.send_message(chat_id, text))
            done += 1
        except Exception:
            failed += 1
            pass

    await gcs.delete()
    _gcs = f"""
<b> ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥á Ä·¥ã…™ Ä…™·¥ç</b>
<b> ô·¥á Ä ú·¥Äs…™ ü: {done} …¢ Ä·¥è·¥ú·¥ò</b>
<b>…¢·¥Ä…¢·¥Ä ü: {failed} …¢ Ä·¥è·¥ú·¥ò</b>
"""
    return await message.reply(_gcs)


@PY.UBOT("ucast")
@PY.TOP_CMD
async def _(client, message):
    await broadcast_users_cmd(client, message)


@PY.BOT("send")
@PY.UBOT("send")
@PY.TOP_CMD
async def _(client, message):
    await send_msg_cmd(client, message)


@PY.INLINE("^get_send")
@INLINE.QUERY
async def _(client, inline_query):
    await send_inline(client, inline_query)


AG = []
LT = []


@PY.UBOT("auto_gcast")
@PY.TOP_CMD
async def _(client, message):
    """
    CREATE BY: NORSODIKIN.T.ME
    REQUEST BY DHILNIHNGE.T.ME:
    """
    msg = await message.reply("<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>", quote=True)
    type, value = extract_type_and_text(message)
    auto_text_vars = await get_vars(client.me.id, "AUTO_TEXT")

    if type == "on":
        if not auto_text_vars:
            return await msg.edit("<b> ú·¥Ä Ä·¥Ä·¥ò s·¥á·¥õ·¥õ…™…¥…¢ ·¥õ·¥áx·¥õ …¢·¥Ñ·¥Äs·¥õ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á Ä ü·¥á ô…™ ú ·¥Ö·¥Ä ú·¥ú ü·¥ú</b>")

        if client.me.id not in AG:
            await msg.edit("<b>·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ ·¥Ö…™·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥</b>")

            AG.append(client.me.id)

            done = 0
            while client.me.id in AG:
                delay = await get_vars(client.me.id, "DELAY_GCAST") or 1
                blacklist = await get_chat(client.me.id)
                txt = random.choice(auto_text_vars)

                group = 0
                async for dialog in client.get_dialogs():
                    if dialog.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP) and dialog.chat.id not in blacklist:
                        try:
                            await asyncio.sleep(1)
                            await client.send_message(dialog.chat.id, f"{txt} {random.choice(range(999))}")
                            group += 1
                        except FloodWait as e:
                            await asyncio.sleep(e.value)
                            await client.send_message(dialog.chat.id, f"{txt} {random.choice(range(999))}")
                            group += 1
                        except Exception:
                            pass

                if client.me.id not in AG:
                    return

                done += 1
                await msg.reply(
                    f"<b>·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ ·¥ò·¥ú·¥õ·¥Ä Ä·¥Ä…¥ {done}  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö·¥Ä…¥ ·¥õ·¥á Ä·¥ã…™ Ä…™·¥ç ·¥ã·¥á: {group} …¢ Ä·¥è·¥ú·¥ò\n\n·¥ç·¥á…¥·¥ú…¥…¢…¢·¥ú {delay} ·¥ç·¥á…¥…™·¥õ  ü·¥Ä…¢…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥ú ü·¥Ä…¥…¢ ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥</b>",
                    quote=True,
                )
                await asyncio.sleep(int(60 * int(delay)))
        else:
            return await msg.delete()

    elif type == "off":
        if client.me.id in AG:
            AG.remove(client.me.id)
            return await msg.edit("<b>·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ ·¥õ·¥á ü·¥Ä ú ·¥Ö…™…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥</b>")
        else:
            return await msg.delete()

    elif type == "text":
        if not value:
            return await msg.edit("<b> ú·¥Ä Ä·¥Ä·¥ò ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ ·¥õ·¥áx·¥õ ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ö…™ s…™·¥ç·¥ò·¥Ä…¥ s·¥á ô·¥Ä…¢·¥Ä…™ ·¥õ·¥áx·¥õ ·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ</b>")
        await add_auto_text(client, value)
        return await msg.edit("<b>·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ ·¥õ·¥áx·¥õ:  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ s…™·¥ç·¥ò·¥Ä…¥</b>")

    elif type == "delay":
        await set_vars(client.me.id, "DELAY_GCAST", value)
        return await msg.edit(f"<b>·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ ·¥Ö·¥á ü·¥Ä è:  ô·¥Ä Ä ú·¥Äs…™ ü ·¥ã·¥á s·¥á·¥õ·¥õ…™…¥…¢ {value} ·¥ç·¥á…¥…™·¥õ</b>")

    elif type == "remove":
        if not value:
            return await msg.edit("<b> ú·¥Ä Ä·¥Ä·¥ò ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ ·¥Ä…¥…¢·¥ã·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús  ü…™s·¥õ ·¥õ·¥áx·¥õ</b>")
        if value == "all":
            await set_vars(client.me.id, "AUTO_TEXT", [])
            return await msg.edit("<b>s·¥á·¥ç·¥ú·¥Ä ·¥õ·¥áx·¥õ  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ú·¥Ä·¥ò·¥ús</b>")
        try:
            value = int(value) - 1
            auto_text_vars.pop(value)
            await set_vars(client.me.id, "AUTO_TEXT", auto_text_vars)
            return await msg.edit(f"<b>·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ  Ä·¥á·¥ç·¥è·¥†·¥á: ·¥õ·¥áx·¥õ ·¥ã·¥á {value+1}  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ú·¥Ä·¥ò·¥ús\n\ns…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã·¥á·¥õ…™·¥ã: <code>{message.text.split()[0]} list</code>, ·¥ã·¥á·¥ç ô·¥Ä ü…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥á·¥Ñ·¥á·¥ã ·¥Ä·¥ò·¥Ä·¥ã·¥Ä ú s·¥ú·¥Ö·¥Ä ú ·¥õ·¥á Ä ú·¥Ä·¥ò·¥ús</b>")
        except Exception as error:
            return await msg.edit(str(error))

    elif type == "list":
        if not auto_text_vars:
            return await msg.edit("<b>·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ ·¥õ·¥áx·¥õ ·¥ã·¥ès·¥è…¥…¢</b>")
        txt = "<b>·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ ·¥õ·¥áx·¥õ</b>\n\n"
        for num, x in enumerate(auto_text_vars, 1):
            txt += f"{num}: {x}\n\n"
        txt += f"<b>\n·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥õ·¥áx·¥õ ·¥ã·¥á·¥õ…™·¥ã: <code>{message.text.split()[0]} remove ·¥Ä…¥…¢·¥ã·¥Ä/·¥Ä ü ü</code></b>"
        return await msg.edit(txt)

    elif type == "limit":
        if value == "off":
            if client.me.id in LT:
                LT.remove(client.me.id)
                return await msg.edit("<b>·¥Ä·¥ú·¥õ·¥è ·¥Ñ·¥á·¥ã  ü…™·¥ç…™·¥õ ·¥Ö…™…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥</b>")
            else:
                return await msg.delete()

        elif value == "on":
            if client.me.id not in LT:
                LT.append(client.me.id)
                await msg.edit("<b>·¥Ä·¥ú·¥õ·¥è ·¥Ñ·¥á·¥ã  ü…™·¥ç…™·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö</b>")
                while client.me.id in LT:
                    for x in range(2):
                        await limit_cmd(client, message)
                        await asyncio.sleep(5)
                    await asyncio.sleep(1200)
            else:
                return await msg.delete()
        else:
            return await msg.edit("<b>~ ú·¥Ä Ä·¥Ä·¥ò ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ ·¥†·¥Ä ü·¥á·¥ú ·¥è…¥/·¥è“ì“ì ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú …™…¥…™</b>")
    else:
        return await msg.edit("<b>«´·¥ú·¥á Ä è  è·¥Ä…¥…¢ ·¥Ö…™·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ s·¥Ä ü·¥Ä ú</b>")


async def add_auto_text(client, text):
    auto_text = await get_vars(client.me.id, "AUTO_TEXT") or []
    auto_text.append(text)
    await set_vars(client.me.id, "AUTO_TEXT", auto_text)


def extract_type_and_text(message):
    args = message.text.split(None, 2)
    if len(args) < 2:
        return None, None

    type = args[1]
    msg = message.reply_to_message.text if message.reply_to_message else args[2] if len(args) > 2 else None
    return type, msg
